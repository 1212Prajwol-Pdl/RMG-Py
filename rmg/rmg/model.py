#!/usr/bin/python
# -*- coding: utf-8 -*-

################################################################################
#
#	RMG - Reaction Mechanism Generator
#
#	Copyright (c) 2002-2009 Prof. William H. Green (whgreen@mit.edu) and the
#	RMG Team (rmg_dev@mit.edu)
#
#	Permission is hereby granted, free of charge, to any person obtaining a
#	copy of this software and associated documentation files (the 'Software'),
#	to deal in the Software without restriction, including without limitation
#	the rights to use, copy, modify, merge, publish, distribute, sublicense,
#	and/or sell copies of the Software, and to permit persons to whom the
#	Software is furnished to do so, subject to the following conditions:
#
#	The above copyright notice and this permission notice shall be included in
#	all copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#	DEALINGS IN THE SOFTWARE.
#
################################################################################

"""
Contains classes for working with the reaction model generated by RMG.
"""

import logging
import math
import numpy
import os
import os.path

import chempy.constants as constants
import chempy.species
import chempy.reaction
from chempy.thermo import WilhoitModel, NASAModel
from chempy.kinetics import ArrheniusModel, ChebyshevModel, PDepArrheniusModel

from rmgdata.thermo import generateThermoData, convertThermoData
from rmgdata.kinetics import generateKineticsData
from rmgdata.states import generateFrequencyData

import measure.network

import settings
from rxngen import generateReactions

################################################################################

class Species(chempy.species.Species):

    def generateThermoData(self, thermoClass=NASAModel):
        """
        Generate thermodynamic data for the species using the thermo database.

        Generates the thermo data for each structure (resonance isomer),
        picks that with lowest H298 value, and saves it to `self.thermoData`.
        """

        # Ensure molecules are using explicit hydrogens
        implicitH = [mol.implicitHydrogens for mol in self.molecule]
        for molecule in self.molecule:
            molecule.makeHydrogensExplicit()
        
        thermo = []
        for molecule in self.molecule:
            molecule.clearLabeledAtoms()
            molecule.updateAtomTypes()
            tdata = generateThermoData(molecule)
            thermo.append(tdata)

        H298 = numpy.array([t.getEnthalpy(298.) for t in thermo])
        indices = H298.argsort()

        # If multiple resonance isomers are present, use the thermo data of
        # the most stable isomer (i.e. one with lowest enthalpy of formation)
        # as the thermo data of the species
        self.thermo = thermo[indices[0]]

        # Sort the structures in order of decreasing stability
        self.molecule = [self.molecule[ind] for ind in indices]
        implicitH = [implicitH[ind] for ind in indices]

        # Convert to desired thermo class
        thermo0 = self.thermo
        self.thermo = convertThermoData(self.thermo, self.molecule[0], WilhoitModel)
        self.E0 = self.thermo.getEnthalpy(1.0)
        self.thermo = convertThermoData(self.thermo, self.molecule[0], thermoClass)
        if self.thermo.__class__ != thermo0.__class__:
            # Compute RMS error of overall transformation
            Tlist = numpy.array([300.0, 400.0, 500.0, 600.0, 800.0, 1000.0, 1500.0], numpy.float64)
            err = math.sqrt(numpy.sum((self.thermo.getHeatCapacities(Tlist) - thermo0.getHeatCapacities(Tlist))**2))/constants.R/len(Tlist)
            logging.log(logging.WARNING if err > 0.1 else 0, 'Average RMS error in heat capacity fit to %s = %g*R' % (self, err))

        # Restore implicit hydrogens if necessary
        for implicit, molecule in zip(implicitH, self.molecule):
            if implicit: molecule.makeHydrogensImplicit()

        return self.thermo

    def generateStatesData(self):
        """
        Generate molecular degree of freedom data for the species. You must
        have already provided a thermodynamics model using e.g.
        :meth:`generateThermoData()`.
        """
        if not self.thermo:
            raise Exception("Unable to determine states model for species %s: No thermodynamics model found." % self)
        molecule = self.molecule[0]
        implicitH = molecule.implicitHydrogens
        molecule.makeHydrogensExplicit()
        self.states = generateFrequencyData(molecule, self.thermo)
        if implicitH: molecule.makeHydrogensImplicit()

    def generateLennardJonesParameters(self):
        """
        Generate the Lennard-Jones parameters for the species. This "algorithm"
        is *very* much in need of improvement.
        """

        count = sum([1 for atom in self.molecule[0].vertices if atom.isNonHydrogen()])
        self.lennardJones = chempy.species.LennardJones()

        if count == 1:
            self.lennardJones.sigma = 3.758e-10
            self.lennardJones.epsilon = 148.6 * constants.kB
        elif count == 2:
            self.lennardJones.sigma = 4.443e-10
            self.lennardJones.epsilon = 110.7 * constants.kB
        elif count == 3:
            self.lennardJones.sigma = 5.118e-10
            self.lennardJones.epsilon = 237.1 * constants.kB
        elif count == 4:
            self.lennardJones.sigma = 4.687e-10
            self.lennardJones.epsilon = 531.4 * constants.kB
        elif count == 5:
            self.lennardJones.sigma = 5.784e-10
            self.lennardJones.epsilon = 341.1 * constants.kB
        else:
            self.lennardJones.sigma = 5.949e-10
            self.lennardJones.epsilon = 399.3 * constants.kB

################################################################################

class Reaction(chempy.reaction.Reaction):

    def __init__(self, index=-1, reactants=None, products=None, kinetics=None, reversible=True, transitionState=None, thirdBody=False, family=None, isForward=True):
        chempy.reaction.Reaction.__init__(self, index, reactants, products, kinetics, reversible, transitionState, thirdBody)
        self.family = family
        self.isForward = isForward
        self.multiplier = 1.0

    def isIsomerization(self):
        """
        Return ``True`` if the reaction represents an isomerization reaction
        :math:`\\ce{A <=> B}` or ``False`` if not.
        """
        return len(self.reactants) == 1 and len(self.products) == 1

    def isAssociation(self):
        """
        Return ``True`` if the reaction represents an association reaction
        :math:`\\ce{A + B <=> C}` or ``False`` if not.
        """
        return len(self.reactants) > 1 and len(self.products) == 1

    def isDissociation(self):
        """
        Return ``True`` if the reaction represents a dissociation reaction
        :math:`\\ce{A <=> B + C}` or ``False`` if not.
        """
        return len(self.reactants) == 1 and len(self.products) > 1

    def generateKineticsData(self):
        """
        Generate kinetcs data for the reaction using the kinetics database.
        """
        self.kinetics = generateKineticsData(self, self.family.label, self.reactantMolecules)
        if not isinstance(self.kinetics, ArrheniusModel):
            self.kinetics = self.kinetics.toArrhenius(self.getEnthalpyOfReaction(298.15))

class PDepReaction(chempy.reaction.Reaction):

    def __init__(self, index=-1, reactants=None, products=None, network=None, kinetics=None, reversible=True, transitionState=None, thirdBody=False):
        chempy.reaction.Reaction.__init__(self, index, reactants, products, kinetics, reversible, transitionState, thirdBody)
        self.network = network

################################################################################

class PDepNetwork(measure.network.Network):
    """
    A representation of a *partial* unimolecular reaction network. Each partial
    network has a single `source` isomer or reactant channel, and is responsible
    only for :math:`k(T,P)` values for net reactions with source as the
    reactant. Multiple partial networks can have the same source, but networks
    with the same source and any explored isomers must be combined.

    =================== ======================= ================================
    Attribute           Type                    Description
    =================== ======================= ================================
    `source`            ``list``                The isomer or reactant channel that acts as the source
    `explored`          ``list``                A list of the unimolecular isomers whose reactions have been fully explored
    =================== ======================= ================================

    """

    def __init__(self, index=-1, source=None):
        measure.network.Network.__init__(self, index=index)
        self.source = source
        self.explored = []

    def getLeakFlux(self, T, P, conc):
        """
        Return the leak flux of the network: the forward flux to all unexplored
        unimolecular isomers in the network. If there is only one path (and
        therefore net) reaction and its unimolecular reactants and/or products
        have not been explored, then it uses the high-pressure-limit rate to
        ensure it is considering the maximum possible rate.
        """

        self.leakFluxes = {}

        # If only one path/net reaction and it contains an isomer that has not
        # been explored, then use the high-pressure-limit k(T) to calculate
        # the flux rather than the phenomenological k(T,P) value
        if len(self.netReactions) == 1 and len(self.pathReactions) == 1:
            rxn = self.netReactions[0]
            rate = self.pathReactions[0].getRate(T, P, conc)
            if len(rxn.reactants) == 1 and rxn.reactants[0] not in self.explored:
                self.leakFluxes[rxn.reactants[0]] = -rate
            if len(rxn.products) == 1 and rxn.products[0] not in self.explored:
                self.leakFluxes[rxn.products[0]] = rate
        # Otherwise get leak fluxes of all unexplored [unimolecular] isomers
        else:
            for rxn in self.netReactions:
                rate = rxn.getRate(T, P, conc)
                if len(rxn.reactants) == 1 and rxn.reactants[0] not in self.explored:
                    spec = rxn.reactants[0]
                    if spec in self.leakFluxes:
                        self.leakFluxes[spec] -= rate
                    else:
                        self.leakFluxes[spec] = -rate
                if len(rxn.products) == 1 and rxn.products[0] not in self.explored:
                    spec = rxn.products[0]
                    if spec in self.leakFluxes:
                        self.leakFluxes[spec] += rate
                    else:
                        self.leakFluxes[spec] = rate

        return sum([abs(v) for v in self.leakFluxes.values()])

    def getMaximumLeakSpecies(self):
        """
        Get the unexplored (unimolecular) isomer with the maximum leak flux.
        """
        if len(self.leakFluxes) == 0:
            raise UnirxnNetworkException('No unimolecular isomers left to explore!')

        # Choose species with maximum leak flux
        maxSpeciesFlux = 0.0; maxSpecies = None
        for spec, flux in self.leakFluxes.iteritems():
            if maxSpecies is None or flux > maxSpeciesFlux:
                maxSpecies = spec; maxSpeciesFlux = flux

        # Return the species and flux
        return maxSpecies, maxSpeciesFlux

################################################################################

class ReactionModel:
    """
    Represent a generic reaction model. A reaction model consists of `species`,
    a list of species, and `reactions`, a list of reactions.
    """

    def __init__(self, species=None, reactions=None):
        self.species = species or []
        self.reactions = reactions or []

################################################################################

class CoreEdgeReactionModel:
    """
    Represent a reaction model constructed using a rate-based screening
    algorithm. The species and reactions in the model itself are called the
    *core*; the species and reactions identified as candidates for inclusion in
    the model are called the *edge*. The attributes are:

    =========================  ==============================================================
    Attribute                  Description
    =========================  ==============================================================
    `core`                     The species and reactions of the current model core
    `edge`                     The species and reactions of the current model edge
    `absoluteTolerance`        The absolute tolerance used in the ODE/DAE solver
    `relativeTolerance`        The relative tolerance used in the ODE/DAE solver
    `fluxToleranceKeepInEdge`  The relative species flux below which species are discarded from the edge
    `fluxToleranceMoveToCore`  The relative species flux above which species are moved from the edge to the core
    `fluxToleranceInterrupt`   The relative species flux above which the simulation will halt
    `maximumEdgeSpecies`       The maximum number of edge species allowed at any time
    `termination`              A list of termination targets (i.e :class:`TerminationTime` and :class:`TerminationConversion` objects)
    `unirxnNetworks`           A list of unimolecular reaction networks (:class:`unirxn.network.Network` objects)
    `networkCount`             A counter for the number of unirxn networks created
    =========================  ==============================================================


    """

    def __init__(self, core=None, edge=None):
        if core is None:
            self.core = ReactionModel()
        else:
            self.core = core
        if edge is None:
            self.edge = ReactionModel()
        else:
            self.edge = edge
        # The default tolerances mimic the original RMG behavior; no edge
        # pruning takes place, and the simulation is interrupted as soon as
        # a species flux higher than the validity
        self.fluxToleranceKeepInEdge = 0.0
        self.fluxToleranceMoveToCore = 1.0
        self.fluxToleranceInterrupt = 1.0
        self.absoluteTolerance = 1.0e-8
        self.relativeTolerance = 1.0e-4
        self.maximumEdgeSpecies = 1000000
        self.termination = []
        self.unirxnNetworks = []
        self.networkCount = 0
        self.speciesDict = {}
        self.reactionDict = {'seed': {}}
        self.speciesCache = [None for i in range(4)]
        self.speciesCounter = 0
        self.reactionCounter = 0

    def checkForExistingSpecies(self, molecule):
        """
        Check to see if an existing species contains the same
        :class:`structure.Structure` as `structure`. Returns ``True`` or
        ``False`` and the matched species (if found, or ``None`` if not).
        """

        # First check cache and return if species is found
        for i, spec in enumerate(self.speciesCache):
            if spec is not None:
                for mol in spec.molecule:
                    if molecule.isIsomorphic(mol):
                        self.speciesCache.pop(i)
                        self.speciesCache.insert(0, spec)
                        return True, spec

        # Return an existing species if a match is found
        formula = molecule.getFormula()
        try:
            for spec in self.speciesDict[formula]:
                for mol in spec.molecule:
                    if molecule.isIsomorphic(mol):
                        self.speciesCache.pop()
                        self.speciesCache.insert(0, spec)
                        return True, spec
        except KeyError: pass
        
        # At this point we can conclude that the structure does not exist
        return False, None

    def makeNewSpecies(self, molecule, label='', reactive=True, checkForExisting=True):
        """
        Create a new species.
        """

        molecule.makeHydrogensImplicit()

        # If desired, check to ensure that the species is new; return the
        # existing species if not new
        if checkForExisting:
            found, spec = self.checkForExistingSpecies(molecule)
            if found: return spec, False

        # Check that the structure is not forbidden

        # If we're here then we're ready to make the new species
        if label == '': label = molecule.toSMILES()
        logging.debug('Creating new species %s' % str(label))
        spec = Species(index=self.speciesCounter+1, label=label, molecule=[molecule], reactive=reactive)
        spec.generateResonanceIsomers()
        spec.molecularWeight = spec.molecule[0].getMolecularWeight()
        spec.generateLennardJonesParameters()
        formula = molecule.getFormula()
        if formula in self.speciesDict:
            self.speciesDict[formula].append(spec)
        else:
            self.speciesDict[formula] = [spec]

        # Store hydrogens implicitly to conserve memory and speed up isomorphism
        for mol in spec.molecule:
            #mol.updateConnectivityValues()
            mol.makeHydrogensImplicit()

        self.speciesCounter += 1

        return spec, True

    def checkForExistingReaction(self, rxn):
        """
        Check to see if an existing reaction has the same reactants, products, and
        family as `rxn`. Returns :data:`True` or :data:`False` and the matched
        reaction (if found).
        """

        # Get the short-list of reactions with the same family, reactant1 and reactant2
        r1 = rxn.reactants[0]
        if len(rxn.reactants)==1: r2 = None
        else: r2 = rxn.reactants[1]
        try:
            my_reactionList = self.reactionDict[rxn.family][r1][r2]
        except KeyError: # no such short-list: must be new, unless in seed.
            my_reactionList = []

        # Now use short-list to check for matches. All should be in same forward direction.
        for rxn0 in my_reactionList:
            if (rxn0.reactants == rxn.reactants and rxn0.products == rxn.products):
                return True, rxn0

        # Now check seed reactions.
        # First check seed short-list in forward direction
        try:
            my_reactionList = self.reactionDict['seed'][r1][r2]
        except KeyError:
            my_reactionList = []
        for rxn0 in my_reactionList:
            if (rxn0.reactants == rxn.reactants and rxn0.products == rxn.products) or \
                (rxn0.reactants == rxn.products and rxn0.products == rxn.reactants):
                return True, rxn0
        # Now get the seed short-list of the reverse reaction
        r1 = rxn.products[0]
        if len(rxn.products)==1: r2 = None
        else: r2 = rxn.products[1]
        try:
            my_reactionList = self.reactionDict['seed'][r1][r2]
        except KeyError:
            my_reactionList = []
        for rxn0 in my_reactionList:
            if (rxn0.reactants == rxn.reactants and rxn0.products == rxn.products) or \
                (rxn0.reactants == rxn.products and rxn0.products == rxn.reactants):
                return True, rxn0

        return False, None

    def makeNewReaction(self, forward, checkExisting=True):
        """
        Make a new reaction given a :class:`Reaction` object `forward`. The kinetics
        of the reaction are estimated and the reaction is added to the global list
        of reactions. Returns the reaction in the direction that corresponds to the
        estimated kinetics, along with whether or not the reaction is new to the
        global reaction list.

        The forward direction is determined using the "is_reverse" attribute of the
        reaction's family.  If the reaction family is its own reverse, then it is
        made such that the forward reaction is exothermic at 298K.
        """

        if checkExisting:
            found, rxn = self.checkForExistingReaction(forward)
            if found: return rxn, False

        # Note in the log
        logging.debug('Creating new %s reaction %s' % (forward.family.label, forward))

        # Add to the global dict/list of existing reactions (a list broken down by family, r1, r2)
        # identify r1 and r2
        r1 = forward.reactants[0]
        r2 = None if len(forward.reactants) == 1 else forward.reactants[1]
        # make dictionary entries if necessary
        if forward.family not in self.reactionDict:
            self.reactionDict[forward.family] = {}
        if not self.reactionDict[forward.family].has_key(r1):
            self.reactionDict[forward.family][r1] = dict()
        if not self.reactionDict[forward.family][r1].has_key(r2):
            self.reactionDict[forward.family][r1][r2] = list()
        # store this reaction at the top of the relevant short-list
        self.reactionDict[forward.family][r1][r2].insert(0, forward)

        forward.index = self.reactionCounter + 1
        self.reactionCounter += 1

        # Return newly created reaction
        return forward, True

    def makeNewPDepReaction(self, forward):
        """
        Make a new pressure-dependent reaction based on a list of `reactants` and a
        list of `products`. The reaction belongs to the specified `network` and
        has pressure-dependent kinetics given by `kinetics`.

        No checking for existing reactions is made here. The returned PDepReaction
        object is not added to the global list of reactions, as that is intended
        to represent only the high-pressure-limit set. The reactionCounter is
        incremented, however, since the returned reaction can and will exist in
        the model edge and/or core.
        """

        # Create reverse reaction
        reverse = PDepReaction(reactants=forward.products, products=forward.reactants, network=forward.network, kinetics=None)
        forward.reverse = reverse
        reverse.reverse = forward

        # Set reaction index and increment the counter
        forward.index = self.reactionCounter + 1
        reverse.index = self.reactionCounter + 1
        self.reactionCounter += 1

        return forward

    def enlarge(self, newObject):
        """
        Enlarge a reaction model by processing `newObject`. If `newObject` is a
        :class:`rmg.species.Species` object, then the species is moved from
        the edge to the core and reactions generated for that species, reacting
        with itself and with all other species in the model core. If `newObject`
        is a :class:`rmg.unirxn.network.Network` object, then reactions are
        generated for the species in the network with the largest leak flux.
        """

        newReactionList = []; newSpeciesList = []

        numOldCoreSpecies = len(self.core.species)
        numOldCoreReactions = len(self.core.reactions)

        if isinstance(newObject, Species):

            newSpecies = newObject

            if not newSpecies.reactive:
                logging.info('NOT generating reactions for unreactive species %s' % newSpecies)
            else:
                # Find reactions involving the new species as unimolecular reactant
                # or product (e.g. A <---> products)
                r, s = generateReactions([newSpecies], self)
                newReactionList.extend(r); newSpeciesList.extend(s)
                # Find reactions involving the new species as bimolecular reactants
                # or products with other core species (e.g. A + B <---> products)
                for coreSpecies in self.core.species:
                    if coreSpecies.reactive:
                        r, s = generateReactions([newSpecies, coreSpecies], self)
                        newReactionList.extend(r); newSpeciesList.extend(s)
                # Find reactions involving the new species as bimolecular reactants
                # or products with itself (e.g. A + A <---> products)
                r, s = generateReactions([newSpecies, newSpecies], self)
                newReactionList.extend(r); newSpeciesList.extend(s)

            # Add new species
            self.addSpeciesToCore(newSpecies)

        elif isinstance(newObject, Network) and settings.pressureDependence:

            network = newObject
            # Determine the species with the maximum leak flux
            maxSpecies, maxSpeciesFlux = network.getMaximumLeakSpecies()
            network.explored.append(maxSpecies)
            # Find reactions involving the found species as unimolecular
            # reactant or product (e.g. A <---> products)
            r, s = generateReactions([maxSpecies], self)
            newReactionList.extend(r); newSpeciesList.extend(s)
            # Don't find reactions involving the new species as bimolecular
            # reactants or products with itself (e.g. A + A <---> products)
            # Don't find reactions involving the new species as bimolecular
            # reactants or products with other core species (e.g. A + B <---> products)

        else:
            raise TypeError('Unable to use object %s to enlarge reaction model; expecting an object of class rmg.species.Species or rmg.unirxn.network.Network.' % newObject)

        # Add new reactions generated in above
        for rxn in newReactionList:
            allSpeciesInCore = True
            for spec in rxn.reactants:
                if spec not in self.core.species:
                    allSpeciesInCore = False
                    if spec not in self.edge.species:
                        self.addSpeciesToEdge(spec)
            for spec in rxn.products:
                if spec not in self.core.species:
                    allSpeciesInCore = False
                    if spec not in self.edge.species:
                        self.addSpeciesToEdge(spec)
            # If pressure dependence is on, we only add reactions that are not unimolecular;
            # unimolecular reactions will be added after processing the associated networks
            if not settings.pressureDependence or not (
                rxn.isIsomerization() or rxn.isDissociation() or rxn.isAssociation()):
                if allSpeciesInCore:
                    self.addReactionToCore(rxn)
                else:
                    self.addReactionToEdge(rxn)
            else:
                # Update unimolecular reaction networks
                net = self.addReactionToUnimolecularNetworks(rxn, newSpecies=newObject)

        # Generate thermodynamics of new species
        logging.info('Generating thermodynamics for new species...')
        for spec in newSpeciesList:
            spec.generateThermoData()
            
        # Generate kinetics of new reactions
        logging.info('Generating kinetics for new reactions...')
        for rxn in newReactionList:
            if rxn.kinetics is None: rxn.generateKineticsData()
            # Now that we have the kinetics we don't need the reactant molecules
            # any more, so delete them to recover the memory
            rxn.reactantMolecules = None
            rxn.reverse.reactantMolecules = None

        # Generate frequencies of new species
        if settings.pressureDependence:
            logging.info('Generating frequencies for new species...')
            for spec in newSpeciesList:
                spec.generateStatesData()

        # Update unimolecular (pressure dependent) reaction networks
        if settings.pressureDependence:
            self.updateUnimolecularReactionNetworks()
            logging.info('')

        # Print summary of enlargement
        if not isinstance(newObject, Species): newSpecies = None
        self.printEnlargeSummary(
            newCoreSpecies=self.core.species[numOldCoreSpecies:],
            newCoreReactions=self.core.reactions[numOldCoreReactions:],
            newEdgeSpecies=newSpeciesList,
            newEdgeReactions=newReactionList,
            newSpecies=newSpecies,
        )

        logging.info('')

    def printEnlargeSummary(self, newCoreSpecies, newCoreReactions, newEdgeSpecies, newEdgeReactions, newSpecies=None):
        """
        Output a summary of a model enlargement step to the log. The details of
        the enlargement are passed in the `newCoreSpecies`, `newCoreReactions`,
        `newEdgeSpecies`, and `newEdgeReactions` objects. If the model
        enlargement is based around one species, you may optionally pass that
        species as `newSpecies`, which will cause all of the reactions to be
        printed with that species as the reactant. If `newSpecies` is ``None``,
        the reactions are printed in the direction for which kinetics are known.
        """

        logging.info('')
        logging.info('Summary of Model Enlargement')
        logging.info('----------------------------')
        logging.info('Added %i new core species' % (len(newCoreSpecies)))
        for spec in newCoreSpecies:
            logging.info('    %s' % (spec))
        logging.info('Created %i new edge species' % len(newEdgeSpecies))
        for spec in newEdgeSpecies:
            logging.info('    %s' % (spec))
        logging.info('Added %i new core reactions' % (len(newCoreReactions)))
        for rxn in newCoreReactions:
            logging.info('    %s' % (rxn.reverse if newSpecies in rxn.products else rxn))
        logging.info('Created %i new edge reactions' % len(newEdgeReactions))
        for rxn in newEdgeReactions:
            logging.info('    %s' % (rxn.reverse if newSpecies in rxn.products else rxn))

        # Output current model size information after enlargement
        logging.info('')
        logging.info('After model enlargement:')
        logging.info('    The model core has %s species and %s reactions' % (len(self.core.species), len(self.core.reactions)))
        logging.info('    The model edge has %s species and %s reactions' % (len(self.edge.species), len(self.edge.reactions)))
        logging.info('')

    def addSpeciesToCore(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        """

        if spec in self.core.species: return

        # Add the species to the core
        self.core.species.append(spec)

        if spec in self.edge.species:

            # If species was in edge, remove it
            self.edge.species.remove(spec)

            # Search edge for reactions that now contain only core species;
            # these belong in the model core and will be moved there
            rxnList = []
            for rxn in self.edge.reactions:
                allCore = True
                for reactant in rxn.reactants:
                    if reactant not in self.core.species: allCore = False
                for product in rxn.products:
                    if product not in self.core.species: allCore = False
                if allCore: rxnList.append(rxn)

            # Move any identified reactions to the core
            for rxn in rxnList:
                self.addReactionToCore(rxn)

    def addSpeciesToEdge(self, spec):
        """
        Add a species `spec` to the reaction model edge.
        """
        self.edge.species.append(spec)

    def removeSpeciesFromEdge(self, spec):
        """
        Remove species `spec` from the reaction model edge.
        """
        # remove the species
        self.edge.species.remove(spec)
        # identify any reactions it's involved in
        rxnList = []
        for rxn in self.edge.reactions:
            if spec in rxn.reactants or spec in rxn.products:
                rxnList.append(rxn)
        # remove those reactions
        for rxn in rxnList:
            self.edge.reactions.remove(rxn)
            # also remove it from the global list of reactions
            # the PDepReactions on the edge aren't in the global list, so we
            # should not try to remove them
            if not isinstance(rxn, reaction.PDepReaction):
                reaction.removeFromGlobalList(rxn)

        # Remove the species from any unirxn networks it is in
        if settings.pressureDependence:
            networksToDelete = []
            for network in self.unirxnNetworks:
                if spec in network.getSpeciesList():
                    # Delete all path reactions involving the species
                    rxnList = []
                    for rxn in network.pathReactions:
                        if spec in rxn.reactants or spec in rxn.products:
                            rxnList.append(rxn)
                    for rxn in rxnList:
                        network.pathReactions.remove(rxn)
                        reaction.removeFromGlobalList(rxn)
                    # Delete all net reactions involving the species
                    rxnList = []
                    for rxn in network.netReactions:
                        if spec in rxn.reactants or spec in rxn.products:
                            rxnList.append(rxn)
                    for rxn in rxnList:
                        network.netReactions.remove(rxn)
                        # net reactions are not in global reaction list
                        # so don't reaction.removeFromGlobalList(rxn)

                    # Delete all isomers involving the species
                    isomerList = []
                    for isomer in network.isomers:
                        if spec in isomer.species:
                            isomerList.append(isomer)
                    for isomer in isomerList:
                        network.isomers.remove(isomer)
                    # If no remaining reactions, delete the network (actually
                    # add to list of networks to be deleted in a subsequent
                    # step)
                    if len(network.pathReactions) == 0 and len(network.netReactions) == 0:
                        networksToDelete.append(network)

            # Complete deletion of empty networks
            for network in networksToDelete:
                logging.debug('Deleting empty unirxn network %s' % network.index)
                self.unirxnNetworks.remove(network)

        # remove from the global list of species, to free memory
        formula = spec.molecule[0].getFormula()
        species.speciesDict[formula].remove(spec)

    def addReactionToCore(self, rxn):
        """
        Add a reaction `rxn` to the reaction model core (and remove from edge if
        necessary). This function assumes `rxn` has already been checked to
        ensure it is supposed to be a core reaction (i.e. all of its reactants
        AND all of its products are in the list of core species).
        """
        self.core.reactions.append(rxn)
        if rxn in self.edge.reactions:
            self.edge.reactions.remove(rxn)
        
    def addReactionToEdge(self, rxn):
        """
        Add a reaction `rxn` to the reaction model edge. This function assumes
        `rxn` has already been checked to ensure it is supposed to be an edge
        reaction (i.e. all of its reactants OR all of its products are in the
        list of core species, and the others are in either the core or the
        edge).
        """
        self.edge.reactions.append(rxn)

    def getLists(self):
        """
        Return lists of all of the species and reactions in the core and the
        edge.
        """
        speciesList = []
        speciesList.extend(self.core.species)
        speciesList.extend(self.edge.species)
        reactionList = []
        reactionList.extend(self.core.reactions)
        reactionList.extend(self.edge.reactions)
        return speciesList, reactionList

    def getStoichiometryMatrix(self):
        """
        Return the stoichiometry matrix for all generated species and reactions.
        The id of each species and reaction is the corresponding row and column,
        respectively, in the matrix.
        """
        speciesList, reactionList = self.getLists()
        from scipy import sparse
        stoichiometry = sparse.dok_matrix((self.speciesCounter, self.reactionCounter), float)
        for rxn in reactionList:
            j = rxn.index - 1
            specList = rxn.reactants[:]; specList.extend(rxn.products)
            for spec in specList:
                i = spec.index - 1
                nu = rxn.getStoichiometricCoefficient(spec)
                if nu != 0: stoichiometry[i,j] = nu
        return stoichiometry.tocsr()

    def getReactionRates(self, T, P, Ci):
        """
        Return an array of reaction rates for each reaction in the model core
        and edge. The id of the reaction is the index into the vector.
        """
        speciesList, reactionList = self.getLists()
        rxnRate = numpy.zeros(self.reactionCounter, float)
        for rxn in reactionList:
            j = rxn.index - 1
            rxnRate[j] = rxn.getRate(T, P, Ci)
        return rxnRate

    def addSeedMechanismToCore(self, seedMechanism, react=False):
        """
        Add all species and reactions from `seedMechanism`, a 
        :class:`KineticsPrimaryDatabase` object, to the model core. If `react`
        is ``True``, then reactions will also be generated between the seed
        species. For large seed mechanisms this can be prohibitively expensive,
        so it is not done by default.
        """
        
        rxnList = []; speciesList = []

        numOldCoreSpecies = len(self.core.species)
        numOldCoreReactions = len(self.core.reactions)

        logging.info('Adding seed mechanism %s to model core...' % seedMechanism)

        dictionary = seedMechanism.database.dictionary

        for rxn in seedMechanism.reactions:
            forward = Reaction(reactants=rxn.reactants[:], products=rxn.products[:], family=seedMechanism, kinetics=rxn.kinetics, isForward=True)
            for i, reactant in enumerate(forward.reactants):
                label = dictionary.keys()[dictionary.values().index(reactant)]
                forward.reactants[i], isNew = self.makeNewSpecies(reactant, label=label)
                if isNew: speciesList.append(forward.reactants[i])
            for i, product in enumerate(forward.products):
                label = dictionary.keys()[dictionary.values().index(product)]
                forward.products[i], isNew = self.makeNewSpecies(product, label=label)
                if isNew: speciesList.append(forward.products[i])
            # Sort reactants and products
            rxn.reactants.sort()
            rxn.products.sort()

            reverse = Reaction(reactants=rxn.products, products=rxn.reactants, family=seedMechanism, isForward=False)
            forward.reverse = reverse
            reverse.reverse = forward

            r, isNew = self.makeNewReaction(forward)
            if isNew: rxnList.append(r)

        for spec in speciesList:
            if spec.reactive: spec.generateThermoData()
            if react:
                self.enlarge(spec)
            else:
                self.addSpeciesToCore(spec)
        
        for rxn in rxnList:
            self.addReactionToCore(rxn)

        self.printEnlargeSummary(
            newCoreSpecies=self.core.species[numOldCoreSpecies:],
            newCoreReactions=self.core.reactions[numOldCoreReactions:],
            newEdgeSpecies=[],
            newEdgeReactions=[],
        )

    def addReactionToUnimolecularNetworks(self, newReaction, newSpecies):
        """
        Given a newly-created :class:`Reaction` object `newReaction`, update the
        corresponding unimolecular reaction network. If no network exists, a new
        one is created. If the new reaction is an isomerization that connects two
        existing networks, the two networks are merged. This function is called
        whenever a new high-pressure limit edge reaction is created. Returns the
        network containing the new reaction.
        """

        assert isinstance(newSpecies, Species)

        # Put the reaction in the direction in which the new species is in the reactants
        reaction = newReaction.reverse if newSpecies in newReaction.products else newReaction
        reaction.reactants.sort()
        reaction.products.sort()
        
        network = None
        if reaction.isIsomerization() or reaction.isDissociation():
            # Find the network containing the reactant as the source
            for n in self.unirxnNetworks:
                if reaction.reactants == n.source:
                    assert network is None
                    network = n
        elif reaction.isAssociation():
            # Find the network containing the reactant as the source AND the
            # product channel as an explored isomer
            for n in self.unirxnNetworks:
                if reaction.reactants == n.source and reaction.products[0] in n.explored:
                    assert network is None
                    network = n

        else:
            return None

        # If no suitable network exists, create a new one
        if network is None:
            self.networkCount += 1
            network = PDepNetwork(index=self.networkCount, source=reaction.reactants[:])
            self.unirxnNetworks.append(network)

        # Add this reaction to that network if not already present
		# Also marks the reactant and product isomers as included if all of
        # their species are in the core
        if newReaction not in network.pathReactions:
            network.pathReactions.append(newReaction)
            network.invalidate()
        
        # Return the network that the reaction was added to
        return network

    def updateUnimolecularReactionNetworks(self):
        """
        Iterate through all of the currently-existing unimolecular reaction
        networks, updating those that have been marked as invalid. In each update,
        the phenomonological rate coefficients :math:`k(T,P)` are computed for
        each net reaction in the network, and the resulting reactions added or
        updated.
        """

        from measure.collision import SingleExponentialDownModel
        from measure.reaction import fitInterpolationModel
        import measure.settings
        import measure.output
        
        count = sum([1 for network in self.unirxnNetworks if not network.valid and len(network.explored) > 0])
        logging.info('Updating %i modified unimolecular reaction networks...' % count)

        # For the purposes of RMG we want each network to run very quickly
        # One way to do this is to only calculate the density of states for
        # the unimolecular isomers
        measure.settings.minimizeDensityOfStatesCalculations = True

        # Iterate over all the networks, updating the invalid ones as necessary
        for network in self.unirxnNetworks:
            if not network.valid:

                if len(network.explored) == 0:
                    network.valid = True
                    continue

                # Other inputs
                method, Tmin, Tmax, Tlist, Pmin, Pmax, Plist, grainSize, numGrains, model = settings.pressureDependence

                # Figure out which configurations are isomers, reactant channels, and product channels
                network.isomers = []
                network.reactants = []
                network.products = []
                for rxn in network.pathReactions:
                    # Sort bimolecular configurations so that we always encounter them in the
                    # same order
                    # The actual order doesn't matter, as long as it is consistent
                    rxn.reactants.sort()
                    rxn.products.sort()
                    # Reactants:
                    # - All unimolecular configurations are automatically isomers
                    # - All bimolecular configurations are automatically reactant channels
                    if len(rxn.reactants) == 1 and rxn.reactants[0] not in network.isomers:
                        network.isomers.append(rxn.reactants[0])
                    elif len(rxn.reactants) > 1 and rxn.reactants not in network.isomers:
                        network.reactants.append(rxn.reactants)
                    # Products:
                    # - If reversible, the same actions are taken as for the reactants
                    # - If irreversible, configurations are treated as products
                    if rxn.reversible:
                        if len(rxn.products) == 1 and rxn.products[0] not in network.isomers:
                            network.isomers.append(rxn.products[0])
                        elif len(rxn.products) > 1 and rxn.products not in network.isomers:
                            network.reactants.append(rxn.products)
                    elif rxn.products not in network.products:
                        network.products.append(rxn.products)
                network.isomers.sort(cmp=lambda x, y: x.index - y.index)
                
                # Update list of explored isomers to include all species in core
                for isom in network.isomers:
                    if isom not in network.explored and isom in self.core.species:
                        network.explored.append(isom)

                # Place all unexplored unimolecular isomers as product channels
                isomersToMove = []
                for isomer in network.isomers:
                    if isomer not in network.explored:
                        isomersToMove.append(isomer)
                for isomer in isomersToMove[::-1]:
                    network.isomers.remove(isomer)
                    network.products.insert(0, [isomer])
                
                # Determine transition state energies on potential energy surface
                # In the absence of any better information, we simply set it to
                # be the reactant ground-state energy + the activation energy
                for rxn in network.pathReactions:
                    rxn.transitionState = chempy.species.TransitionState(
                        E0=sum([spec.E0 for spec in rxn.reactants]) + rxn.kinetics.Ea,
                    )

                # Set collision model
                bathGas = [spec for spec in self.core.species if not spec.reactive]
                network.bathGas = {}
                for spec in bathGas:
                    network.bathGas[spec] = 1.0 / len(bathGas)
                network.collisionModel = SingleExponentialDownModel(alpha0=4.86 * 4184)
                
                # Save input file
                measure.output.writeInput(os.path.join(settings.outputDirectory, 'pdep', 'network%i_%i.py' % (network.index, len(network.isomers))),
                    network, Tlist, Plist, (grainSize, numGrains), method, model)

                # Automatically choose a suitable set of energy grains if they were not
                # explicitly specified in the input file
                Elist = network.autoGenerateEnergyGrains(Tmax=Tmax, grainSize=grainSize, Ngrains=numGrains)

                network.printSummary(level=logging.INFO)

                # Calculate the rate coefficients
                K, p0 = network.calculateRateCoefficients(Tlist, Plist, Elist, method)

                # Generate PDepReaction objects
                configurations = []
                configurations.extend([[isom] for isom in network.isomers])
                configurations.extend([reactants for reactants in network.reactants])
                configurations.extend([products for products in network.products])
                for i in range(K.shape[2]):
                    for j in range(i):
                        
                            # Check that we have nonzero k(T,P) values
                            if numpy.any(K[:,:,i,j]):
                                if not numpy.all(K[:,:,i,j]):
                                    raise NetworkError('Zero rate coefficient encountered while updating network %s.' % network)

                                # Find the path reaction
                                netReaction = None
                                for r in network.netReactions:
                                    if r.hasTemplate(configurations[j], configurations[i]):
                                        netReaction = r
                                # If net reaction does not already exist, make a new one
                                if netReaction is None:
                                    netReaction = PDepReaction(
                                        reactants=configurations[j],
                                        products=configurations[i],
                                        network=network,
                                        kinetics=None
                                    )
                                    netReaction = self.makeNewPDepReaction(netReaction)
                                    network.netReactions.append(netReaction)

                                    # Place the net reaction in the core or edge if necessary
                                    # Note that leak reactions are not placed in the edge
                                    if netReaction.reactants in network.reactants or netReaction.reactants in network.products:
                                        pass
                                    elif all([s in self.core.species for s in netReaction.reactants]) and all([s in self.core.species for s in netReaction.products]):
                                        self.addReactionToCore(netReaction)
                                    else:
                                        self.addReactionToEdge(netReaction)

                                # Set/update the net reaction kinetics using interpolation model
                                netReaction.kinetics = fitInterpolationModel(netReaction, Tlist, Plist, K[:,:,i,j], model, Tmin, Tmax, Pmin, Pmax)

                # We're done processing this network, so mark it as valid
                network.valid = True

    def loadSeedMechanism(self, path):
        """
        Loads a seed mechanism from the folder indicated by `path` into the
        core-edge reaction model.
        """

        import os.path
        import quantities as pq
        import data
        import thermo.data
        import kinetics.data
        import reaction

        # Load the species data from the file species.txt
        # This file has the format of a standard RMG dictionary
        d = data.Dictionary()
        d.load(os.path.join(path, 'species.txt'))
        d.toStructure(addH=True)

        # Load the thermo data from the file thermo.txt
        # This file has the format of a standard RMG thermo library
        thermoData = thermo.data.ThermoDatabase()
        thermoData.load(os.path.join(path, 'species.txt'), '', os.path.join(path, 'thermo.txt'))
        # Populate the main primary thermo library with this thermo data
        # This will overwrite keys (but not values), so the order that the
        # seed mechanisms are loaded matters!
        for key, value in d.iteritems():
            thermo.data.thermoDatabase.primaryDatabase.dictionary[key] = value
        for key, value in thermoData.library.iteritems():
            thermo.data.thermoDatabase.primaryDatabase.library[key] = value

        # Create new species based on items in species.txt
        seedSpeciesDict = {}; seedSpeciesList = []
        for label, struct in d.iteritems():
            spec, isNew = species.makeNewSpecies(struct, label, reactive=True)
            seedSpeciesDict[label] = spec
            seedSpeciesList.append(spec)

        # Load the reactions from the file reaction.txt
        seedReactionList = []
        f = open(os.path.join(path, 'reactions.txt'), 'r')
        for line in f:
            line = data.removeCommentFromLine(line)
            line.strip()
            if len(line) > 0:
                items = line.split()
                if len(items) > 0:
                    rxn = items[0:-6]

                    # Extract reactants and products
                    if '<=>' in rxn: arrow = rxn.index('<=>')
                    elif '=>' in rxn: arrow = rxn.index('=>')
                    else: raise IOError('No arrow found in reaction equation from line %s' % line)
                    reactants = rxn[0:arrow:2]
                    products = rxn[arrow+1::2]

                    # Remove third body 'M' if present
                    thirdBody = False
                    if 'M' in reactants and 'M' in products:
                        thirdBody = True
                        reactants.remove('M')
                        products.remove('M')

                    # Convert strings to species objects
                    reactants = [seedSpeciesDict[r] for r in reactants]
                    products = [seedSpeciesDict[r] for r in products]
                    reactants.sort()
                    products.sort()

                    # Process Arrhenius parameters
                    order = len(reactants)
                    if (thirdBody): order += 1
                    Aunits = 'cm^%i/(mol^%i*s)' % (3*(order-1), order-1)
                    A = float(pq.Quantity(float(items[-6]), Aunits).simplified)
                    n = float(items[-5])			# dimensionless
                    Ea = float(pq.Quantity(float(items[-4]), 'cal/mol').simplified)
                    kin = [kinetics.model.ArrheniusModel(A=A, n=n, Ea=Ea)]

                    # Create reaction object and add to list
                    rxn = reaction.Reaction(id=0, reactants=reactants, products=products, family='seed', kinetics=kin, thirdBody=thirdBody)
                    rxn.reverse = reaction.Reaction(id=0, reactants=products, products=reactants, family='seed', kinetics=None, thirdBody=thirdBody)
                    rxn.reverse.reverse = rxn
                    reaction.processNewReaction(rxn)
                    seedReactionList.append(rxn)

        f.close()

        # Add species to core
        for spec in seedSpeciesList:
            self.addSpeciesToCore(spec)
        # Add reactions to core
        for rxn in seedReactionList:
            self.addReactionToCore(rxn)
